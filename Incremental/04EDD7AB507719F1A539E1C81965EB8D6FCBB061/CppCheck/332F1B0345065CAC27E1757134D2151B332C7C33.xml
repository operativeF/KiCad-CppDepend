<?xml version="1.0" encoding="UTF-8"?><results version="2">    <cppcheck version="1.76.1"/>    <errors>        <error id="variableScope" severity="style" msg="The scope of the variable &apos;start&apos; can be reduced." verbose="The scope of the variable &apos;start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">            <location file0="C:\dev\kicad-personal\kicad\project_template.cpp" file="C:\dev\kicad-personal\kicad\project_template.cpp" line="249"/>        </error>        <error id="variableScope" severity="style" msg="The scope of the variable &apos;finish&apos; can be reduced." verbose="The scope of the variable &apos;finish&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">            <location file0="C:\dev\kicad-personal\kicad\project_template.cpp" file="C:\dev\kicad-personal\kicad\project_template.cpp" line="250"/>        </error>        <error id="useInitializationList" severity="performance" msg="Variable &apos;templateBasePath&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;templateBasePath&apos; a value by passing the value to the constructor in the initialization list." cwe="398">            <location file0="C:\dev\kicad-personal\kicad\project_template.cpp" file="C:\dev\kicad-personal\kicad\project_template.cpp" line="40"/>        </error>        <error id="noCopyConstructor" severity="style" msg="&apos;class PROJECT_TEMPLATE&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class PROJECT_TEMPLATE&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." cwe="398">            <location file0="C:\dev\kicad-personal\kicad\project_template.cpp" file="System32\dev\kicad-personal\kicad\project_template.h" line="143"/>        </error>        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PROJECT_TEMPLATE&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PROJECT_TEMPLATE&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">            <location file0="C:\dev\kicad-personal\kicad\project_template.cpp" file="System32\dev\kicad-personal\kicad\project_template.h" line="161"/>        </error>        <error id="unsafeClassCanLeak" severity="style" msg="Class &apos;PROJECT_TEMPLATE&apos; is unsafe, &apos;PROJECT_TEMPLATE::metaIcon&apos; can leak by wrong usage." verbose="The class &apos;PROJECT_TEMPLATE&apos; is unsafe, wrong usage can cause memory/resource leaks for &apos;PROJECT_TEMPLATE::metaIcon&apos;. This can for instance be fixed by adding proper cleanup in the destructor." cwe="398">            <location file0="C:\dev\kicad-personal\kicad\project_template.cpp" file="System32\dev\kicad-personal\kicad\project_template.h" line="150"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;CreateProject&apos; is never used." verbose="The function &apos;CreateProject&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\kicad\project_template.cpp" line="156"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;GetDestinationFiles&apos; is never used." verbose="The function &apos;GetDestinationFiles&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\kicad\project_template.cpp" line="118"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;GetIcon&apos; is never used." verbose="The function &apos;GetIcon&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\kicad\project_template.cpp" line="112"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;GetPrjDirName&apos; is never used." verbose="The function &apos;GetPrjDirName&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\kicad\project_template.cpp" line="94"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;GetTitle&apos; is never used." verbose="The function &apos;GetTitle&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\kicad\project_template.cpp" line="240"/>        </error>        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: preprocessorErrorDirective" verbose="Unmatched suppression: preprocessorErrorDirective">            <location file="*" line="0"/>        </error>    </errors></results>