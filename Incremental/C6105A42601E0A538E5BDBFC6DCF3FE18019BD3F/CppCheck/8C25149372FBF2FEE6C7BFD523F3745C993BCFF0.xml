<?xml version="1.0" encoding="UTF-8"?><results version="2">    <cppcheck version="1.76.1"/>    <errors>        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">            <location file0="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" file="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" line="263"/>        </error>        <error id="operatorEq" severity="style" msg="&apos;LINE::operator=&apos; should return &apos;LINE &amp;&apos;." verbose="The LINE::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;LINE &amp;LINE::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers." cwe="398">            <location file0="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" file="System32\dev\kicad-personal\pcbnew\router\pns_line.h" line="102"/>        </error>        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_type&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_type&apos; a value by passing the value to the constructor in the initialization list." cwe="398">            <location file0="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" file="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" line="53"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;Box&apos; is never used." verbose="The function &apos;Box&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" line="313"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;Line&apos; is never used." verbose="The function &apos;Line&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" line="298"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;ViewBBox&apos; is never used." verbose="The function &apos;ViewBBox&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" line="126"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;ViewDraw&apos; is never used." verbose="The function &apos;ViewDraw&apos; is never used." cwe="561">            <location file="C:\dev\kicad-personal\pcbnew\router\router_preview_item.cpp" line="159"/>        </error>        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: preprocessorErrorDirective" verbose="Unmatched suppression: preprocessorErrorDirective">            <location file="*" line="0"/>        </error>        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>    </errors></results>